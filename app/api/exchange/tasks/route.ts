import { NextRequest, NextResponse } from "next/server";
import { createClient } from '@supabase/supabase-js';
import { z } from "zod";
import { logActivity } from '../../../utils/activities';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Client Supabase c√¥t√© serveur
const supabase = createClient(
  supabaseUrl || 'https://jdemxmntzsetwrhzzknl.supabase.co',
  supabaseAnonKey || 'sb_publishable_W8PK0Nvw_TBQkPfvJKoOTw_CYTRacwN'
);

// Fonction pour v√©rifier si Supabase est configur√©
function isSupabaseConfigured() {
  return !!(supabaseUrl && supabaseAnonKey);
}

// Interfaces
interface User {
  id: string;
  phone: string;
  password: string;
  credits: number;
  pseudo: string | null;
  created_at: string;
  updated_at: string;
}

interface ExchangeTask {
  id: string;
  type: string;
  url: string;
  credits: number;
  actions_restantes: number;
  createur: string;
  created_at: string;
  updated_at: string;
}

interface ExchangeTaskCompletion {
  id: string;
  exchange_task_id: string;
  user_id: string;
  completed_at: string;
}

const createTaskSchema = z.object({
  type: z.enum(["LIKE", "FOLLOW", "COMMENT", "SHARE"]),
  url: z.string().min(1, "Lien requis").refine(val => val.includes("tiktok.com"), {
    message: "Le lien doit contenir tiktok.com"
  }),
  actionsRestantes: z.number().min(1, "Au moins 1 action"),
  createur: z.string().min(1, "Nom du cr√©ateur requis"),
});

const ADMIN_PHONE = "+237699486146";

export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ D√©but cr√©ation de t√¢che...');
    
    // V√©rifier la configuration Supabase
    if (!isSupabaseConfigured()) {
      console.warn('‚ö†Ô∏è Configuration Supabase manquante, simulation de cr√©ation de t√¢che');
      
      const body = await request.json();
      const { type, url, actionsRestantes, createur } = createTaskSchema.parse(body);
      
      // Simuler une cr√©ation de t√¢che
      const simulatedTask = {
        id: Date.now().toString(),
        type,
        url,
        credits: 1,
        actionsRestantes,
        createur,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      
      console.log('‚úÖ T√¢che simul√©e cr√©√©e:', simulatedTask);
      return NextResponse.json(simulatedTask, { status: 201 });
    }
    
    const body = await request.json();
    console.log('üìù Donn√©es re√ßues:', body);
    
    const { type, url, actionsRestantes, createur } = createTaskSchema.parse(body);
    const credits = 1; // Cr√©dit fixe de 1 pour toutes les t√¢ches
    
    console.log('‚úÖ Validation des donn√©es r√©ussie:', { type, url, actionsRestantes, createur });
    
    // Bypass admin : acc√®s total
    if (createur === ADMIN_PHONE) {
      console.log('üëë Cr√©ation de t√¢che admin...');
      
      const newTask = {
        id: Date.now().toString(),
        type,
        url,
        credits,
        actions_restantes: actionsRestantes,
        createur,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { error } = await supabase
        .from('tasks')
        .insert(newTask);

      if (error) {
        console.error('‚ùå Erreur cr√©ation t√¢che admin:', error);
        return NextResponse.json({ 
          error: "Erreur lors de la cr√©ation de la t√¢che", 
          details: error.message 
        }, { status: 500 });
      }

      console.log('‚úÖ T√¢che admin cr√©√©e avec succ√®s');
      
      const transformedTask = {
        id: newTask.id,
        type: newTask.type,
        url: newTask.url,
        credits: newTask.credits,
        actionsRestantes: newTask.actions_restantes,
        createur: newTask.createur,
        createdAt: newTask.created_at,
        updatedAt: newTask.updated_at
      };
      return NextResponse.json(transformedTask, { status: 201 });
    }
    
    // Trouver l'utilisateur par t√©l√©phone ou pseudo
    console.log('üîç Recherche utilisateur:', createur);
    
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .or(`phone.eq.${createur},pseudo.eq.${createur}`)
      .maybeSingle();
    
    if (userError) {
      console.error('‚ùå Erreur recherche utilisateur:', userError);
      return NextResponse.json({ 
        error: "Erreur lors de la recherche de l'utilisateur",
        details: userError.message 
      }, { status: 500 });
    }
    
    if (!user) {
      console.log('üë§ Utilisateur non trouv√©, cr√©ation...');
      
      // Cr√©er un nouvel utilisateur
      const newUser = {
        id: Date.now().toString(),
        phone: createur,
        password: 'default_password',
        credits: 10, // Cr√©dits de d√©part
        pseudo: createur,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { data: createdUser, error: createUserError } = await supabase
        .from('users')
        .insert(newUser)
        .select()
        .single();

      if (createUserError) {
        console.error('‚ùå Erreur cr√©ation utilisateur:', createUserError);
        return NextResponse.json({ 
          error: "Erreur lors de la cr√©ation de l'utilisateur",
          details: createUserError.message 
        }, { status: 500 });
      }

      console.log('‚úÖ Utilisateur cr√©√©:', createdUser);
      
      // V√©rifier les cr√©dits
      if (createdUser.credits < credits) {
        return NextResponse.json({ 
          error: "Cr√©dits insuffisants pour cr√©er cette t√¢che",
          required: credits,
          available: createdUser.credits
        }, { status: 400 });
      }

      // Cr√©er la t√¢che
      const newTask = {
        id: Date.now().toString(),
        type,
        url,
        credits,
        actions_restantes: actionsRestantes,
        createur: createdUser.id,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { error: taskError } = await supabase
        .from('tasks')
        .insert(newTask);

      if (taskError) {
        console.error('‚ùå Erreur cr√©ation t√¢che:', taskError);
        return NextResponse.json({ 
          error: "Erreur lors de la cr√©ation de la t√¢che",
          details: taskError.message 
        }, { status: 500 });
      }

      // D√©duire les cr√©dits
      const { error: updateError } = await supabase
        .from('users')
        .update({ 
          credits: createdUser.credits - credits,
          updated_at: new Date().toISOString()
        })
        .eq('id', createdUser.id);

      if (updateError) {
        console.error('‚ùå Erreur mise √† jour cr√©dits:', updateError);
        // Ne pas √©chouer la cr√©ation de t√¢che si la mise √† jour des cr√©dits √©choue
      }

      console.log('‚úÖ T√¢che cr√©√©e avec succ√®s pour nouvel utilisateur');
      
      const transformedTask = {
        id: newTask.id,
        type: newTask.type,
        url: newTask.url,
        credits: newTask.credits,
        actionsRestantes: newTask.actions_restantes,
        createur: newTask.createur,
        createdAt: newTask.created_at,
        updatedAt: newTask.updated_at
      };
      return NextResponse.json(transformedTask, { status: 201 });
    }

    // Utilisateur existant
    console.log('üë§ Utilisateur trouv√©:', user);
    
    // V√©rifier les cr√©dits
    if (user.credits < credits) {
      return NextResponse.json({ 
        error: "Cr√©dits insuffisants pour cr√©er cette t√¢che",
        required: credits,
        available: user.credits
      }, { status: 400 });
    }

    // Cr√©er la t√¢che
    const newTask = {
      id: Date.now().toString(),
      type,
      url,
      credits,
      actions_restantes: actionsRestantes,
      createur: user.id,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { error: taskError } = await supabase
      .from('tasks')
      .insert(newTask);

    if (taskError) {
      console.error('‚ùå Erreur cr√©ation t√¢che:', taskError);
      return NextResponse.json({ 
        error: "Erreur lors de la cr√©ation de la t√¢che",
        details: taskError.message 
      }, { status: 500 });
    }

    // D√©duire les cr√©dits
    const { error: updateError } = await supabase
      .from('users')
      .update({ 
        credits: user.credits - credits,
        updated_at: new Date().toISOString()
      })
      .eq('id', user.id);

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour cr√©dits:', updateError);
      // Ne pas √©chouer la cr√©ation de t√¢che si la mise √† jour des cr√©dits √©choue
    }

    console.log('‚úÖ T√¢che cr√©√©e avec succ√®s');
    
    const transformedTask = {
      id: newTask.id,
      type: newTask.type,
      url: newTask.url,
      credits: newTask.credits,
      actionsRestantes: newTask.actions_restantes,
      createur: newTask.createur,
      createdAt: newTask.created_at,
      updatedAt: newTask.updated_at
    };
    return NextResponse.json(transformedTask, { status: 201 });

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation de t√¢che:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({ 
        error: "Donn√©es invalides",
        details: error.issues 
      }, { status: 400 });
    }
    
    return NextResponse.json({ 
      error: "Erreur serveur lors de la cr√©ation de la t√¢che",
      details: error instanceof Error ? error.message : 'Erreur inconnue'
    }, { status: 500 });
  }
}

// Lister toutes les t√¢ches d'√©change
export async function GET() {
  try {
    console.log('üîÑ R√©cup√©ration des t√¢ches...');
    
    const { data: tasks, error: tasksError } = await supabase
      .from('tasks')
      .select('*')
      .order('created_at', { ascending: false });

    if (tasksError) {
      console.error('‚ùå Erreur r√©cup√©ration t√¢ches:', tasksError);
      return NextResponse.json({ error: 'Erreur lors de la r√©cup√©ration des t√¢ches' }, { status: 500 });
    }

    console.log(`‚úÖ ${tasks?.length || 0} t√¢ches r√©cup√©r√©es`);

    // R√©cup√©rer les compl√©tions pour chaque t√¢che
    const tasksWithCompletions = await Promise.all((tasks || []).map(async (task) => {
      try {
      const { data: completions, error: completionsError } = await supabase
        .from('task_completions')
        .select('*')
        .eq('exchange_task_id', task.id);

      if (completionsError) {
          console.error('‚ö†Ô∏è Erreur r√©cup√©ration compl√©tions pour t√¢che', task.id, ':', completionsError);
      }

      return {
        id: task.id,
        type: task.type,
        url: task.url,
        credits: task.credits,
        actionsRestantes: task.actions_restantes, // Transformation snake_case vers camelCase
        createur: task.createur,
        createdAt: task.created_at,
        updatedAt: task.updated_at,
        completions: completions?.map(comp => ({
          id: comp.id,
          userId: comp.user_id,
          completedAt: comp.completed_at
        })) || []
      };
      } catch (error) {
        console.error('‚ö†Ô∏è Erreur lors du traitement de la t√¢che', task.id, ':', error);
        return {
          id: task.id,
          type: task.type,
          url: task.url,
          credits: task.credits,
          actionsRestantes: task.actions_restantes,
          createur: task.createur,
          createdAt: task.created_at,
          updatedAt: task.updated_at,
          completions: []
        };
      }
    }));
    
    console.log('‚úÖ T√¢ches avec compl√©tions pr√©par√©es');
    return NextResponse.json(tasksWithCompletions);
  } catch (error) {
    console.error('‚ùå Erreur GET /api/exchange/tasks:', error);
    return NextResponse.json({ error: 'Erreur lors de la r√©cup√©ration des t√¢ches' }, { status: 500 });
  }
}

// Valider une action d'√©change (ajouter une compl√©tion)
export async function PATCH(request: NextRequest) {
  try {
    const body = await request.json();
    const { exchangeTaskId, userId } = z.object({
      exchangeTaskId: z.string().min(1),
      userId: z.string().min(1),
    }).parse(body);

    // Bypass admin : acc√®s total
    if (userId === ADMIN_PHONE) {
      return NextResponse.json({ success: true });
    }

    // V√©rifier si d√©j√† compl√©t√©
    const { data: existingCompletion, error: checkError } = await supabase
      .from('task_completions')
      .select('*')
      .eq('exchange_task_id', exchangeTaskId)
      .eq('user_id', userId)
      .maybeSingle();

    if (checkError) {
      console.error('Erreur v√©rification compl√©tion:', checkError);
      return NextResponse.json({ error: "Erreur lors de la v√©rification" }, { status: 500 });
    }

    if (existingCompletion) {
      return NextResponse.json({ error: "D√©j√† compl√©t√© par cet utilisateur" }, { status: 409 });
    }

    // Trouver la t√¢che
    const { data: task, error: taskError } = await supabase
      .from('tasks')
      .select('*')
      .eq('id', exchangeTaskId)
      .single();

    if (taskError || !task) {
      return NextResponse.json({ error: "T√¢che non trouv√©e" }, { status: 404 });
    }

    // Cr√©er la compl√©tion
    const newCompletion = {
      id: Date.now().toString(),
      exchange_task_id: exchangeTaskId,
      user_id: userId,
      completed_at: new Date().toISOString()
    };
    
    const { error: completionError } = await supabase
      .from('task_completions')
      .insert(newCompletion);

    if (completionError) {
      console.error('Erreur cr√©ation compl√©tion:', completionError);
      return NextResponse.json({ error: "Erreur lors de la cr√©ation de la compl√©tion" }, { status: 500 });
    }

    // D√©cr√©menter actions_restantes
    const { error: updateTaskError } = await supabase
      .from('tasks')
      .update({ 
        actions_restantes: task.actions_restantes - 1,
        updated_at: new Date().toISOString()
      })
      .eq('id', task.id);

    if (updateTaskError) {
      console.error('Erreur mise √† jour t√¢che:', updateTaskError);
      return NextResponse.json({ error: "Erreur lors de la mise √† jour de la t√¢che" }, { status: 500 });
    }

    // Cr√©diter l'utilisateur qui compl√®te
    let { data: user, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('pseudo', userId)
      .maybeSingle();

    if (userError) {
      console.error('Erreur recherche utilisateur:', userError);
      return NextResponse.json({ error: "Erreur lors de la recherche de l'utilisateur" }, { status: 500 });
    }

    const creditsEarned = 5; // Gain fixe de 5 cr√©dits pour toute t√¢che effectu√©e

    if (!user) {
      // Cr√©er un nouvel utilisateur
      const newUser = {
        id: Date.now().toString(),
        phone: userId,
        password: '',
        credits: 100 + creditsEarned,
        pseudo: userId,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };

      const { error: createError } = await supabase
        .from('users')
        .insert(newUser);

      if (createError) {
        console.error('Erreur cr√©ation utilisateur:', createError);
        return NextResponse.json({ error: "Erreur lors de la cr√©ation de l'utilisateur" }, { status: 500 });
      }
    } else {
      // Mettre √† jour les cr√©dits
      const { error: updateUserError } = await supabase
        .from('users')
        .update({ 
          credits: user.credits + creditsEarned,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (updateUserError) {
        console.error('Erreur mise √† jour cr√©dits utilisateur:', updateUserError);
        return NextResponse.json({ error: "Erreur lors de la mise √† jour des cr√©dits" }, { status: 500 });
      }
    }

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur PATCH /api/exchange/tasks:', error);
    return NextResponse.json({ error: "Erreur lors de la validation de l'action" }, { status: 400 });
  }
}

export async function DELETE(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const id = url.searchParams.get("id");
    if (!id) {
      return NextResponse.json({ error: "ID manquant" }, { status: 400 });
    }
    
    const { error } = await supabase
      .from('tasks')
      .delete()
      .eq('id', id);

    if (error) {
      console.error('Erreur suppression t√¢che:', error);
      return NextResponse.json({ error: "Erreur lors de la suppression" }, { status: 500 });
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Erreur DELETE /api/exchange/tasks:', error);
    return NextResponse.json({ error: "Erreur lors de la suppression" }, { status: 500 });
  }
}

 