import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Client Supabase c√¥t√© serveur
const supabase = createClient(
  supabaseUrl || 'https://jdemxmntzsetwrhzzknl.supabase.co',
  supabaseAnonKey || 'sb_publishable_W8PK0Nvw_TBQkPfvJKoOTw_CYTRacwN'
);

// GET: R√©cup√©rer toutes les t√¢ches avec leurs d√©tails
export async function GET() {
  try {
    console.log('üîÑ R√©cup√©ration de toutes les t√¢ches pour l\'admin...');
    
    const { data: tasks, error: tasksError } = await supabase
      .from('tasks')
      .select('*')
      .order('created_at', { ascending: false });

    if (tasksError) {
      console.error('‚ùå Erreur r√©cup√©ration t√¢ches:', tasksError);
      return NextResponse.json({ error: 'Erreur lors de la r√©cup√©ration des t√¢ches' }, { status: 500 });
    }

    console.log(`‚úÖ ${tasks?.length || 0} t√¢ches r√©cup√©r√©es`);

    // R√©cup√©rer les compl√©tions pour chaque t√¢che
    const tasksWithCompletions = await Promise.all((tasks || []).map(async (task) => {
      try {
        const { data: completions, error: completionsError } = await supabase
          .from('task_completions')
          .select('*')
          .eq('exchange_task_id', task.id);

        if (completionsError) {
          console.error('‚ö†Ô∏è Erreur r√©cup√©ration compl√©tions pour t√¢che', task.id, ':', completionsError);
        }

        return {
          id: task.id,
          type: task.type,
          url: task.url,
          credits: task.credits,
          actionsRestantes: task.actions_restantes,
          createur: task.createur,
          createdAt: task.created_at,
          updatedAt: task.updated_at,
          completions: completions || [],
          completionCount: completions?.length || 0
        };
      } catch (error) {
        console.error('‚ùå Erreur lors du traitement de la t√¢che', task.id, ':', error);
        return {
          id: task.id,
          type: task.type,
          url: task.url,
          credits: task.credits,
          actionsRestantes: task.actions_restantes,
          createur: task.createur,
          createdAt: task.created_at,
          updatedAt: task.updated_at,
          completions: [],
          completionCount: 0
        };
      }
    }));

    return NextResponse.json({
      tasks: tasksWithCompletions,
      total: tasksWithCompletions.length
    });

  } catch (error) {
    console.error('‚ùå Erreur serveur:', error);
    return NextResponse.json({ 
      error: 'Erreur serveur: ' + (error instanceof Error ? error.message : 'Erreur inconnue')
    }, { status: 500 });
  }
}

// DELETE: Supprimer des t√¢ches sp√©cifiques
export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json();
    const { taskIds } = body;

    if (!taskIds || !Array.isArray(taskIds) || taskIds.length === 0) {
      return NextResponse.json({ error: 'Liste des IDs de t√¢ches requise' }, { status: 400 });
    }

    console.log('üóëÔ∏è Suppression de', taskIds.length, 't√¢ches...');

    // Supprimer les compl√©tions associ√©es d'abord
    const { error: completionsError } = await supabase
      .from('task_completions')
      .delete()
      .in('exchange_task_id', taskIds);

    if (completionsError) {
      console.error('‚ùå Erreur suppression compl√©tions:', completionsError);
      return NextResponse.json({ 
        error: 'Erreur lors de la suppression des compl√©tions' 
      }, { status: 500 });
    }

    // Supprimer les t√¢ches
    const { data: deletedTasks, error: tasksError } = await supabase
      .from('tasks')
      .delete()
      .in('id', taskIds);

    if (tasksError) {
      console.error('‚ùå Erreur suppression t√¢ches:', tasksError);
      return NextResponse.json({ 
        error: 'Erreur lors de la suppression des t√¢ches' 
      }, { status: 500 });
    }

    console.log('‚úÖ', taskIds.length, 't√¢ches supprim√©es avec succ√®s');

    return NextResponse.json({ 
      success: true, 
      message: `${taskIds.length} t√¢che(s) supprim√©e(s) avec succ√®s`,
      deletedCount: taskIds.length
    });

  } catch (error) {
    console.error('‚ùå Erreur serveur:', error);
    return NextResponse.json({ 
      error: 'Erreur serveur: ' + (error instanceof Error ? error.message : 'Erreur inconnue')
    }, { status: 500 });
  }
} 