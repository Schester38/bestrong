import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// V√©rifier que les variables d'environnement sont d√©finies
if (!supabaseUrl || !supabaseAnonKey) {
  console.error('Variables Supabase manquantes dans create-default-challenges:', {
    supabaseUrl: !!supabaseUrl,
    supabaseAnonKey: !!supabaseAnonKey
  });
}

const supabase = createClient(
  supabaseUrl || 'https://jdemxmntzsetwrhzzknl.supabase.co',
  supabaseAnonKey || 'sb_publishable_W8PK0Nvw_TBQkPfvJKoOTw_CYTRacwN'
);

export async function POST(request: NextRequest) {
  try {
    console.log('=== CR√âATION D√âFIS AUTOMATIQUE ===');

    // √âtape 1: V√©rifier la connexion √† la table
    console.log('1. Test connexion table activities...');
    const { data: tableCheck, error: tableError } = await supabase
      .from('activities')
      .select('*')
      .limit(1);

    if (tableError) {
      console.error('‚ùå Erreur connexion table:', tableError);
      return NextResponse.json({ 
        error: 'Erreur connexion table activities: ' + tableError.message 
      }, { status: 500 });
    }
    console.log('‚úÖ Connexion table OK');

    // √âtape 2: V√©rifier les d√©fis existants
    console.log('2. V√©rification d√©fis existants...');
    const { data: existingChallenges, error: checkError } = await supabase
      .from('activities')
      .select('id')
      .eq('type', 'task_created')
      .limit(1);

    if (checkError) {
      console.error('‚ùå Erreur v√©rification d√©fis:', checkError);
      return NextResponse.json({ 
        error: 'Erreur v√©rification d√©fis existants: ' + checkError.message 
      }, { status: 500 });
    }

    if (existingChallenges && existingChallenges.length > 0) {
      console.log('‚úÖ D√©fis existent d√©j√†');
      return NextResponse.json({ 
        message: 'Des d√©fis existent d√©j√†. Utilisez l\'interface admin pour les g√©rer.',
        existing: true
      });
    }
    console.log('‚úÖ Aucun d√©fi existant');

    // √âtape 3: R√©cup√©rer un utilisateur admin
    console.log('3. R√©cup√©ration utilisateur admin...');
    const { data: existingUser, error: userError } = await supabase
      .from('users')
      .select('id, phone, pseudo')
      .limit(1);

    if (userError || !existingUser || existingUser.length === 0) {
      console.error('‚ùå Erreur utilisateurs:', userError);
      return NextResponse.json({ 
        error: 'Aucun utilisateur trouv√©: ' + (userError?.message || 'Table users vide') 
      }, { status: 500 });
    }
    console.log('‚úÖ Utilisateur trouv√©:', existingUser[0]);

    const adminUser = existingUser[0];

    // √âtape 4: Cr√©er les d√©fis avec le type autoris√©
    console.log('4. Cr√©ation des d√©fis...');
    const defaultChallenges = [
      {
        id: (Date.now() + 1).toString(),
        user_id: adminUser.id,
        user_phone: adminUser.phone,
        user_pseudo: adminUser.pseudo || 'Admin',
        type: 'task_created',
        description: 'üéØ Cr√©ateur du jour - Publiez 3 contenus de qualit√©',
        created_at: new Date().toISOString()
      },
      {
        id: (Date.now() + 2).toString(),
        user_id: adminUser.id,
        user_phone: adminUser.phone,
        user_pseudo: adminUser.pseudo || 'Admin',
        type: 'task_created',
        description: '‚ù§Ô∏è Engagement quotidien - Obtenez 100 likes sur vos contenus',
        created_at: new Date().toISOString()
      },
      {
        id: (Date.now() + 3).toString(),
        user_id: adminUser.id,
        user_phone: adminUser.phone,
        user_pseudo: adminUser.pseudo || 'Admin',
        type: 'task_created',
        description: 'üìà Strat√®ge social - Gagnez 500 nouveaux followers',
        created_at: new Date().toISOString()
      },
      {
        id: (Date.now() + 4).toString(),
        user_id: adminUser.id,
        user_phone: adminUser.phone,
        user_pseudo: adminUser.pseudo || 'Admin',
        type: 'task_created',
        description: 'üî• Viral Hunter - Cr√©ez un contenu qui d√©passe 10k vues',
        created_at: new Date().toISOString()
      },
      {
        id: (Date.now() + 5).toString(),
        user_id: adminUser.id,
        user_phone: adminUser.phone,
        user_pseudo: adminUser.pseudo || 'Admin',
        type: 'task_created',
        description: '‚≠ê Influenceur confirm√© - Atteignez 10k followers',
        created_at: new Date().toISOString()
      },
      {
        id: (Date.now() + 6).toString(),
        user_id: adminUser.id,
        user_phone: adminUser.phone,
        user_pseudo: adminUser.pseudo || 'Admin',
        type: 'task_created',
        description: 'üéµ Challenge TikTok - Participez √† 5 challenges populaires',
        created_at: new Date().toISOString()
      }
    ];

    const insertedChallenges = [];
    let successCount = 0;

    for (let i = 0; i < defaultChallenges.length; i++) {
      const challenge = defaultChallenges[i];
      console.log(`Insertion d√©fi ${i + 1}/${defaultChallenges.length}...`);
      
      try {
        const { data: insertedChallenge, error: insertError } = await supabase
          .from('activities')
          .insert(challenge)
          .select()
          .single();

        if (insertError) {
          console.error(`‚ùå Erreur d√©fi ${i + 1}:`, insertError);
          continue;
        }

        if (insertedChallenge) {
          insertedChallenges.push(insertedChallenge);
          successCount++;
          console.log(`‚úÖ D√©fi ${i + 1} cr√©√©: ${challenge.description}`);
        }
      } catch (error) {
        console.error(`‚ùå Exception d√©fi ${i + 1}:`, error);
        continue;
      }
    }

    console.log(`=== R√âSULTAT: ${successCount}/${defaultChallenges.length} d√©fis cr√©√©s ===`);

    if (successCount === 0) {
      return NextResponse.json({ 
        error: 'Aucun d√©fi cr√©√©. V√©rifiez les logs du serveur.' 
      }, { status: 500 });
    }

    return NextResponse.json({ 
      success: true,
      message: `üéâ ${successCount} d√©fis cr√©√©s avec succ√®s !`,
      challenges: insertedChallenges
    });

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
    return NextResponse.json({ 
      error: 'Erreur serveur: ' + (error instanceof Error ? error.message : 'Erreur inconnue')
    }, { status: 500 });
  }
} 